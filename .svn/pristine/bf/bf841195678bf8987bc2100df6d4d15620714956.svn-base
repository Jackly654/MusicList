package com.ifun361.musiclist.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ifun361.musiclist.model.Playlists;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table PLAYLISTS.
*/
public class PlaylistsDao extends AbstractDao<Playlists, Long> {

    public static final String TABLENAME = "PLAYLISTS";

    /**
     * Properties of entity Playlists.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Position = new Property(1, Integer.class, "position", false, "POSITION");
        public final static Property PlaylistId = new Property(2, Integer.class, "playlistId", false, "PLAYLIST_ID");
        public final static Property EditorId = new Property(3, Integer.class, "editorId", false, "EDITOR_ID");
        public final static Property ThemeId = new Property(4, Integer.class, "themeId", false, "THEME_ID");
        public final static Property PublishTime = new Property(5, Integer.class, "publishTime", false, "PUBLISH_TIME");
        public final static Property Backgrounds = new Property(6, Integer.class, "backgrounds", false, "BACKGROUNDS");
        public final static Property Name = new Property(7, String.class, "name", false, "NAME");
        public final static Property PlayitemCount = new Property(8, Integer.class, "playitemCount", false, "PLAYITEM_COUNT");
        public final static Property Lead = new Property(9, String.class, "lead", false, "LEAD");
        public final static Property Taste = new Property(10, Integer.class, "taste", false, "TASTE");
        public final static Property PlayitemDuration = new Property(11, Integer.class, "playitemDuration", false, "PLAYITEM_DURATION");
    };


    public PlaylistsDao(DaoConfig config) {
        super(config);
    }
    
    public PlaylistsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'PLAYLISTS' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'POSITION' INTEGER," + // 1: position
                "'PLAYLIST_ID' INTEGER," + // 2: playlistId
                "'EDITOR_ID' INTEGER," + // 3: editorId
                "'THEME_ID' INTEGER," + // 4: themeId
                "'PUBLISH_TIME' INTEGER," + // 5: publishTime
                "'BACKGROUNDS' INTEGER," + // 6: backgrounds
                "'NAME' TEXT," + // 7: name
                "'PLAYITEM_COUNT' INTEGER," + // 8: playitemCount
                "'LEAD' TEXT," + // 9: lead
                "'TASTE' INTEGER," + // 10: taste
                "'PLAYITEM_DURATION' INTEGER);"); // 11: playitemDuration
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'PLAYLISTS'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Playlists entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(2, position);
        }
 
        Integer playlistId = entity.getPlaylistId();
        if (playlistId != null) {
            stmt.bindLong(3, playlistId);
        }
 
        Integer editorId = entity.getEditorId();
        if (editorId != null) {
            stmt.bindLong(4, editorId);
        }
 
        Integer themeId = entity.getThemeId();
        if (themeId != null) {
            stmt.bindLong(5, themeId);
        }
 
        Long publishTime = entity.getPublishTime();
        if (publishTime != null) {
            stmt.bindLong(6, publishTime);
        }
 
        Integer backgrounds = entity.getBackgrounds();
        if (backgrounds != null) {
            stmt.bindLong(7, backgrounds);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(8, name);
        }
 
        Integer playitemCount = entity.getPlayitemCount();
        if (playitemCount != null) {
            stmt.bindLong(9, playitemCount);
        }
 
        String lead = entity.getLead();
        if (lead != null) {
            stmt.bindString(10, lead);
        }
 
        Integer taste = entity.getTaste();
        if (taste != null) {
            stmt.bindLong(11, taste);
        }
 
        Integer playitemDuration = entity.getPlayitemDuration();
        if (playitemDuration != null) {
            stmt.bindLong(12, playitemDuration);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Playlists readEntity(Cursor cursor, int offset) {
        Playlists entity = new Playlists( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // position
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // playlistId
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // editorId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // themeId
            cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5), // publishTime
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // backgrounds
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // name
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // playitemCount
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // lead
            cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10), // taste
            cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11) // playitemDuration
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Playlists entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlaylistId(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setEditorId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setThemeId(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setPublishTime(cursor.isNull(offset + 5) ? null : cursor.getLong(offset + 5));
        entity.setBackgrounds(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setName(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setPlayitemCount(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setLead(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setTaste(cursor.isNull(offset + 10) ? null : cursor.getInt(offset + 10));
        entity.setPlayitemDuration(cursor.isNull(offset + 11) ? null : cursor.getInt(offset + 11));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(Playlists entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(Playlists entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
