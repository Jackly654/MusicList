package com.ifun361.musiclist.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ifun361.musiclist.model.RecommendsList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table RECOMMENDS_LIST.
*/
public class RecommendsListDao extends AbstractDao<RecommendsList, Long> {

    public static final String TABLENAME = "RECOMMENDS_LIST";

    /**
     * Properties of entity RecommendsList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property RecommendId = new Property(1, Integer.class, "recommendId", false, "RECOMMEND_ID");
        public final static Property Title = new Property(2, String.class, "title", false, "TITLE");
        public final static Property PictureFile = new Property(3, String.class, "pictureFile", false, "PICTURE_FILE");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property ContentType = new Property(5, Integer.class, "contentType", false, "CONTENT_TYPE");
        public final static Property ContentId = new Property(6, Integer.class, "contentId", false, "CONTENT_ID");
        public final static Property Status = new Property(7, Integer.class, "status", false, "STATUS");
        public final static Property RecommendGroupId = new Property(8, Integer.class, "recommendGroupId", false, "RECOMMEND_GROUP_ID");
        public final static Property Position = new Property(9, Integer.class, "position", false, "POSITION");
    };


    public RecommendsListDao(DaoConfig config) {
        super(config);
    }
    
    public RecommendsListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'RECOMMENDS_LIST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'RECOMMEND_ID' INTEGER," + // 1: recommendId
                "'TITLE' TEXT," + // 2: title
                "'PICTURE_FILE' TEXT," + // 3: pictureFile
                "'LINK' TEXT," + // 4: link
                "'CONTENT_TYPE' INTEGER," + // 5: contentType
                "'CONTENT_ID' INTEGER," + // 6: contentId
                "'STATUS' INTEGER," + // 7: status
                "'RECOMMEND_GROUP_ID' INTEGER," + // 8: recommendGroupId
                "'POSITION' INTEGER);"); // 9: position
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'RECOMMENDS_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, RecommendsList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer recommendId = entity.getRecommendId();
        if (recommendId != null) {
            stmt.bindLong(2, recommendId);
        }
 
        String title = entity.getTitle();
        if (title != null) {
            stmt.bindString(3, title);
        }
 
        String pictureFile = entity.getPictureFile();
        if (pictureFile != null) {
            stmt.bindString(4, pictureFile);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        Integer contentType = entity.getContentType();
        if (contentType != null) {
            stmt.bindLong(6, contentType);
        }
 
        Integer contentId = entity.getContentId();
        if (contentId != null) {
            stmt.bindLong(7, contentId);
        }
 
        Integer status = entity.getStatus();
        if (status != null) {
            stmt.bindLong(8, status);
        }
 
        Integer recommendGroupId = entity.getRecommendGroupId();
        if (recommendGroupId != null) {
            stmt.bindLong(9, recommendGroupId);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(10, position);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public RecommendsList readEntity(Cursor cursor, int offset) {
        RecommendsList entity = new RecommendsList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // recommendId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // title
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // pictureFile
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // contentType
            cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6), // contentId
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // status
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // recommendGroupId
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9) // position
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, RecommendsList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setRecommendId(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setTitle(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPictureFile(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setContentType(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setContentId(cursor.isNull(offset + 6) ? null : cursor.getInt(offset + 6));
        entity.setStatus(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setRecommendGroupId(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setPosition(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(RecommendsList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(RecommendsList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
