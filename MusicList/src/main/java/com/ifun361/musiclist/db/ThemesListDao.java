package com.ifun361.musiclist.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.ifun361.musiclist.model.ThemesList;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table THEMES_LIST.
*/
public class ThemesListDao extends AbstractDao<ThemesList, Long> {

    public static final String TABLENAME = "THEMES_LIST";

    /**
     * Properties of entity ThemesList.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Position = new Property(1, Integer.class, "position", false, "POSITION");
        public final static Property PlaylistCount = new Property(2, Integer.class, "playlistCount", false, "PLAYLIST_COUNT");
        public final static Property ThemeId = new Property(3, Integer.class, "themeId", false, "THEME_ID");
        public final static Property UpdateTime = new Property(4, Integer.class, "updateTime", false, "UPDATE_TIME");
        public final static Property Covers = new Property(5, Integer.class, "covers", false, "COVERS");
        public final static Property Name = new Property(6, String.class, "name", false, "NAME");
        public final static Property TargetId = new Property(7, Integer.class, "targetId", false, "TARGET_ID");
        public final static Property PlaylistDuration = new Property(8, Integer.class, "playlistDuration", false, "PLAYLIST_DURATION");
        public final static Property TargetType = new Property(9, Integer.class, "targetType", false, "TARGET_TYPE");
        public final static Property Intro = new Property(10, String.class, "intro", false, "INTRO");
    };


    public ThemesListDao(DaoConfig config) {
        super(config);
    }
    
    public ThemesListDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "'THEMES_LIST' (" + //
                "'_id' INTEGER PRIMARY KEY ," + // 0: id
                "'POSITION' INTEGER," + // 1: position
                "'PLAYLIST_COUNT' INTEGER," + // 2: playlistCount
                "'THEME_ID' INTEGER," + // 3: themeId
                "'UPDATE_TIME' INTEGER," + // 4: updateTime
                "'COVERS' INTEGER," + // 5: covers
                "'NAME' TEXT," + // 6: name
                "'TARGET_ID' INTEGER," + // 7: targetId
                "'PLAYLIST_DURATION' INTEGER," + // 8: playlistDuration
                "'TARGET_TYPE' INTEGER," + // 9: targetType
                "'INTRO' TEXT);"); // 10: intro
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "'THEMES_LIST'";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, ThemesList entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        Integer position = entity.getPosition();
        if (position != null) {
            stmt.bindLong(2, position);
        }
 
        Integer playlistCount = entity.getPlaylistCount();
        if (playlistCount != null) {
            stmt.bindLong(3, playlistCount);
        }
 
        Integer themeId = entity.getThemeId();
        if (themeId != null) {
            stmt.bindLong(4, themeId);
        }
 
        Integer updateTime = entity.getUpdateTime();
        if (updateTime != null) {
            stmt.bindLong(5, updateTime);
        }
 
        Integer covers = entity.getCovers();
        if (covers != null) {
            stmt.bindLong(6, covers);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(7, name);
        }
 
        Integer targetId = entity.getTargetId();
        if (targetId != null) {
            stmt.bindLong(8, targetId);
        }
 
        Integer playlistDuration = entity.getPlaylistDuration();
        if (playlistDuration != null) {
            stmt.bindLong(9, playlistDuration);
        }
 
        Integer targetType = entity.getTargetType();
        if (targetType != null) {
            stmt.bindLong(10, targetType);
        }
 
        String intro = entity.getIntro();
        if (intro != null) {
            stmt.bindString(11, intro);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public ThemesList readEntity(Cursor cursor, int offset) {
        ThemesList entity = new ThemesList( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1), // position
            cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2), // playlistCount
            cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3), // themeId
            cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4), // updateTime
            cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5), // covers
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // name
            cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7), // targetId
            cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8), // playlistDuration
            cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9), // targetType
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // intro
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, ThemesList entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setPosition(cursor.isNull(offset + 1) ? null : cursor.getInt(offset + 1));
        entity.setPlaylistCount(cursor.isNull(offset + 2) ? null : cursor.getInt(offset + 2));
        entity.setThemeId(cursor.isNull(offset + 3) ? null : cursor.getInt(offset + 3));
        entity.setUpdateTime(cursor.isNull(offset + 4) ? null : cursor.getInt(offset + 4));
        entity.setCovers(cursor.isNull(offset + 5) ? null : cursor.getInt(offset + 5));
        entity.setName(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTargetId(cursor.isNull(offset + 7) ? null : cursor.getInt(offset + 7));
        entity.setPlaylistDuration(cursor.isNull(offset + 8) ? null : cursor.getInt(offset + 8));
        entity.setTargetType(cursor.isNull(offset + 9) ? null : cursor.getInt(offset + 9));
        entity.setIntro(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(ThemesList entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(ThemesList entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}
